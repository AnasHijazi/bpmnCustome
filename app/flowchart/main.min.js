let inputObj=null,outputObj=null;function prepareOpeartors(obj,withValue){let temp={};let type=Object.prototype.toString.call(obj).split(' ')[1];type=type.substring(0,type.length-1);if(type==='Array'){temp.array={};temp.array.label='array'+' ('+type+')';temp.array.children=prepareOpeartors(obj[0],withValue)}else{for(let key in obj){temp[key]={};if(obj[key]instanceof Array||obj[key]instanceof Object){let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);temp[key].label=key+' ('+type+')';if(obj[key]instanceof Array){if(obj[key][0]instanceof Object){let tempSub=prepareOpeartors(obj[key][0],withValue);temp[key].children=tempSub}else{let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);temp[key].label=key+' ('+type+')'}}else{let tempSub=prepareOpeartors(obj[key],withValue);temp[key].children=tempSub}}else{let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);temp[key].label=key+' ('+type+')'}}}
return temp};function prepareMappingObject(obj){let temp={};for(let key in obj){temp[key]={};if(obj[key]instanceof Array||obj[key]instanceof Object){let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);if(type==='Array'){let type=Object.prototype.toString.call(obj[key][0]).split(' ')[1];type=type.substring(0,type.length-1);temp[key].ofType='Array';temp[key].isArray=!0;if(type==='Object'){let tempSub=prepareMappingObject(obj[key][0]);temp[key].contents=tempSub}else{temp[key].contents=type}
temp[key].mapTo=null}else{let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);let tempSub=prepareMappingObject(obj[key]);temp[key].ofType=type;temp[key].isArray=!1;temp[key].children=tempSub;temp[key].mapTo=null}}else{let type=Object.prototype.toString.call(obj[key]).split(' ')[1];type=type.substring(0,type.length-1);temp[key].ofType=type;temp[key].isArray=!1;temp[key].mapTo=null}}
return temp};function buildRequestBody(map,input){let obj={};function addStructure(item,valuesObj,itemValue){let temp={};for(let key in item){let objInfo=item[key];switch(objInfo.ofType){case 'Array':{if(objInfo.mapTo){let tempPath=objInfo.mapTo.split('->');let val=valuesObj;while(tempPath.length>0){val=val[tempPath[0]];tempPath.shift()}
temp[key]=val;break}else{temp[key]=[];if(objInfo.contents instanceof Object){let shouldMap=!1;let keysToMap=[];for(let subKey in objInfo.contents){let subItem=objInfo.contents[subKey];if(subItem.mapTo){shouldMap=!0;keysToMap.push(subKey)}}
if(shouldMap){let subItem=objInfo.contents;let count=0;let tempPath=subItem[keysToMap[0]].mapTo.split('->');let val=valuesObj;while(tempPath.length>0){val=val[tempPath[0]];if(val instanceof Array){val.forEach((el)=>{let temp2=addStructure(subItem,valuesObj,el);temp[key].push(temp2)})}
tempPath.shift()}}}
break}}
case 'Object':{if(objInfo.mapTo){let tempPath=objInfo.mapTo.split('->');let val=valuesObj;while(tempPath.length>0){val=val[tempPath[0]];tempPath.shift()}
temp[key]=val;break}else{temp[key]={};if(objInfo.hasOwnProperty('children')){let temp2=addStructure(objInfo.children,valuesObj);for(let subKey in temp2){temp[key][subKey]=temp2[subKey]}}
break}}
case 'String':{if(objInfo.mapTo){let tempPath=objInfo.mapTo.split('->');if(itemValue){temp[key]=itemValue[tempPath[tempPath.length-1]]}else{let searchObj=valuesObj;while(tempPath.length>0){searchObj=searchObj[tempPath[0]];tempPath.shift()}
temp[key]=searchObj}}else{temp[key]=objInfo.mapTo}
break}
case 'Number':{if(objInfo.mapTo){let tempPath=objInfo.mapTo.split('->');if(itemValue){temp[key]=itemValue[tempPath[tempPath.length-1]]}else{let searchObj=valuesObj;while(tempPath.length>0){searchObj=searchObj[tempPath[0]];tempPath.shift()}
temp[key]=searchObj}}else{temp[key]=objInfo.mapTo}
break}
case 'Boolean':{if(objInfo.mapTo){let tempPath=objInfo.mapTo.split('->');if(itemValue){temp[key]=itemValue[tempPath[tempPath.length-1]]}else{let searchObj=valuesObj;while(tempPath.length>0){searchObj=searchObj[tempPath[0]];tempPath.shift()}
temp[key]=searchObj}}else{temp[key]=objInfo.mapTo}
break}
default:{temp[key]=null}}}
return temp}
obj=addStructure(map,input);return obj}
function buildOutputDivs(parentDivClass){let parentDiv=$('.'+parentDivClass);let buttonsContainer=$('<div class="container flex-center"></div>');let outputButtonDiv=$('<div class="pd-mg"></div>');let outputButtonLabel=$('<label id="output-json-label" for="output-json"><b>Task JSON:</b></label>');let outputButton=$('<input type="file" id="output-json" name="output-json" />');outputButtonDiv.append(outputButtonLabel);outputButtonDiv.append(outputButton);buttonsContainer.append(outputButtonDiv);let inputButtonDiv=$('<div class="pd-mg"></div>');let inputButtonLabel=$('<label id="input-json-label" for="input-json"><b>REST JSON:</b></label>');let inputButton=$('<input type="file" id="input-json" name="input-json" />');inputButtonDiv.append(inputButtonLabel);inputButtonDiv.append(inputButton);buttonsContainer.append(inputButtonDiv);parentDiv.append(buttonsContainer);let flowchartDiv=$('<div class="flowchart-example-container flowchart-container" id="flowchart-container"></div>');parentDiv.append(flowchartDiv);let containerDiv=$('<div class="container"></div>');let dataDiv=$('<div class="data half pd-mg"></div>');let dataFieldset=$(`<fieldset>`+`<legend><b>Mapping JSON</b> - click anywhere to copy to clipboard</legend>`+`<pre id="code-block"></pre>`+`</fieldset>`);dataDiv.append(dataFieldset);containerDiv.append(dataDiv);let responseDiv=$('<div class="data half pd-mg"></div>');let responseFieldset=$(`<fieldset>`+`<legend><b>Response JSON</b> - click anywhere to copy to clipboard</legend>`+`<pre id="response-json"></pre>`+`</fieldset>`);responseDiv.append(responseFieldset);containerDiv.append(responseDiv);let wholeObjDiv=$('<div class="data half pd-mg"></div>');let wholeObjFieldset=$(`<fieldset>`+`<legend><b>Whole object</b> - click anywhere to copy to clipboard</legend>`+`<pre id="whole-object"></pre>`+`</fieldset>`);wholeObjDiv.append(wholeObjFieldset);containerDiv.append(wholeObjDiv);parentDiv.append(containerDiv);let snackbarDiv=$('<div id="snackbar">JSON copied to clipboard</div>');parentDiv.append(snackbarDiv);$("#input-json").change((event)=>{loadJSON(event,(json)=>{inputObj=JSON.parse(json);if(!outputObj){$('#output-json-label').addClass('error')}else{$('#output-json-label').removeClass('error')}
if(inputObj&&outputObj){$('#input-json-label').removeClass('error')}
refreshData(inputObj,outputObj)})});$("#output-json").change((event)=>{loadJSON(event,(json)=>{outputObj=JSON.parse(json);if(!inputObj){$('#input-json-label').addClass('error')}else{$('#input-json-label').removeClass('error')}
if(inputObj&&outputObj){$('#output-json-label').removeClass('error')}
refreshData(inputObj,outputObj)})})}
function loadJSON(event,callback){const fileList=event.target.files;if(fileList.length>0){const file=fileList[0];const reader=new FileReader();reader.onload=(readerEvt)=>{const binaryString=readerEvt.target.result;callback(binaryString)};reader.readAsText(file,'UTF-8')}}
function updateData($flowchart,inputData,outputData){function mapValues(input,linksList){for(let link in linksList){let tempInput=input;let toConnector=linksList[link].toConnector;let newValue=linksList[link].fromValue;let tempConnector=toConnector.split('->');while(tempConnector.length>1){tempInput=tempInput[tempConnector[0]];if(tempInput.ofType==='Array'){tempInput=tempInput.contents}else{tempInput=tempInput.children}
tempConnector.shift()}
tempInput[tempConnector[0]].mapTo=linksList[link].fromConnector;tempInput[tempConnector[0]].toType=linksList[link].toType;tempInput[tempConnector[0]].fromContents=linksList[link].fromContents}};var data=$flowchart.flowchart('getData');let temp=jQuery.extend(!0,{},inputData);temp=prepareMappingObject(temp);mapValues(temp,data.links);$('#code-block').html(JSON.stringify(temp,undefined,2));$('#response-json').html(JSON.stringify(buildRequestBody(temp,outputData),undefined,2));let wholeData={data:data,input:inputData,output:outputData}
$('#whole-object').html(JSON.stringify(wholeData,undefined,2))}
function refreshData(input,output){let outputOperator={top:5,left:60,properties:{title:'Task',inputs:{},outputs:prepareOpeartors(output,!0)}};let inputOperator={top:5,left:760,properties:{title:'Rest service',inputs:prepareOpeartors(input,!0),outputs:{}}};var $flowchart=$('#flowchart-container');$flowchart.flowchart('setOperatorData','operator1',outputOperator);$flowchart.flowchart('setOperatorData','operator2',inputOperator)}
function resetData(callback){var $flowchart=$('#flowchart-container');let data={operators:{operator1:{top:5,left:60,properties:{title:'Task',inputs:{},outputs:{}}},operator2:{top:5,left:760,properties:{title:'Rest service',inputs:{},outputs:{}}},},links:{},operatorTypes:{}};$flowchart.flowchart('setData',data);$("#input-json").val("");$("#output-json").val("");inputObj=outputObj=null;$('#code-block').html("");$('#response-json').html("");$('#whole-object').html("");callback()}
function fillFlowchart(wholeObj){var $flowchart=$('#flowchart-container');let data=wholeObj.data;inputObj=wholeObj.input;outputObj=wholeObj.output;$flowchart.flowchart('setData',data)}
function InitFlowchart(parentDivClass){buildOutputDivs(parentDivClass);let data={operators:{operator1:{top:5,left:60,properties:{title:'Task',inputs:{},outputs:{}}},operator2:{top:5,left:760,properties:{title:'Rest service',inputs:{},outputs:{}}},},links:{},operatorTypes:{}};var $flowchart=$('#flowchart-container');$flowchart.flowchart({data:data,onAfterChange:function(changeType){updateData($flowchart,inputObj,outputObj)}});const codeBlock=document.querySelector('#code-block');codeBlock.onclick=()=>{document.execCommand('copy')};codeBlock.addEventListener('copy',(event)=>{event.preventDefault();if(event.clipboardData){event.clipboardData.setData("text/plain",$('#code-block').text());showSnackbar()}});const restBlock=document.querySelector('#response-json');restBlock.onclick=()=>{document.execCommand('copy')};restBlock.addEventListener('copy',(event)=>{event.preventDefault();if(event.clipboardData){event.clipboardData.setData("text/plain",$('#response-json').text());showSnackbar()}});function showSnackbar(){let snackbar=$('#snackbar');snackbar.addClass('show');setTimeout(()=>{snackbar.removeClass('show')},3000)}}